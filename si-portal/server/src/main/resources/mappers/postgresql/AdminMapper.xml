<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.siportal.portal.mapper.AdminMapper">
    <delete id="deleteSchedule">
        DELETE FROM P_SCHEDULER
        WHERE JOB_NAME = #{jobName}
            AND GROUP_NAME = #{groupName}
    </delete>
    <select id="getScheduleList" parameterType="String" resultType="com.siportal.portal.dto.SchedulDTO">
        SELECT
            JOB_NAME, GROUP_NAME, TRIGGER_KEY, CLASS_NAME, CRON_TAB, TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') CREATE_DATE, STATUS
            , ROW_NUMBER() OVER() AS GRID_ROW_ID
        FROM
            P_SCHEDULER
        WHERE 1 = 1
        <if test="status != null and status != ''">
            AND STATUS = #{status}
        </if>
        <if test="jobName != null and jobName != ''">
            AND JOB_NAME = #{jobName}
        </if>
        ORDER BY JOB_NAME
    </select>
    <select id="getUserByUserName" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT
        ROW_NUMBER() OVER (ORDER BY A.CREATE_DATE DESC) as GRID_ROW_ID
        , A.USER_ID, A.USER_NAME, A.EMAIL, A.PHONE_NUMBER
        , A.STATUS
        , TO_CHAR(A.CREATE_DATE,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
        , TO_CHAR(A.UPDATE_DATE,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
        , A.UPDATE_BY
        , C.ROLE_NAME
        , C.ROLE_ID
        FROM P_USER A
        , P_USER_ROLE B
        , P_ROLE C
        WHERE 1=1
        AND A.USER_ID = B.USER_ID
        AND B.ROLE_ID = C.ROLE_ID

        <if test="userName != null and userName != ''">
            AND A.USER_NAME = #{userName}
        </if>
        ORDER BY A.CREATE_DATE DESC
    </select>

    <delete id="deleteUser" >
        DELETE FROM P_USER
        WHERE USER_ID = #{userId}
    </delete>

    <delete id="deleteUserRole" >
        DELETE FROM P_USER_ROLE
        WHERE USER_ID = #{userId}
    </delete>

    <update id="updateUser">
        UPDATE P_USER
        SET USER_NAME = #{userName}
        , EMAIL = #{email}
        , PHONE_NUMBER = #{phoneNumber}
        , STATUS = #{status}
        , UPDATE_DATE = NOW()
        , UPDATE_BY = 'ADMIN'
        WHERE USER_ID = #{userId}
    </update>
    <update id="updateUserRole">
        UPDATE P_USER_ROLE
        SET ROLE_ID = #{roleId}
        WHERE USER_ID = #{userId}
    </update>



    <update id="deleteUserInfo">
        DO $$
        DECLARE
        user_id VARCHAR := #{userId};
        BEGIN
        DELETE FROM P_USER WHERE USER_ID = user_id;
        DELETE FROM P_USER_ROLE WHERE USER_ID = user_id;
        END $$;
    </update>

    <select id="getEmailHistory" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT ROW_NUMBER() OVER (ORDER BY CREATION_TIME desc) as GRID_ROW_ID
        ,SEND_USER
        ,SEND_RECIVER
        ,TITLE
        ,CONTENT
        ,READ_YN
        ,TO_CHAR(CREATION_TIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATION_TIME
        FROM P_EMAIL_HISTORY
        WHERE 1=1
        <if test="sendUser != null and sendUser != ''">
            AND SEND_USER = #{sendUser}
        </if>
        ORDER BY CREATION_TIME desc
    </select>

    <select id="getAllRoles" resultType="com.siportal.portal.com.result.ComResultMap">
        select
         C.permission_id
        ,B.role_name
        ,A.menu_name
        ,C.can_create
        ,C.can_read
        ,C.can_update
        ,C.can_delete
        ,TO_CHAR(C.create_date, 'YYYY-MM-DD') AS create_date
        ,C.create_by
        ,TO_CHAR(C.update_date, 'YYYY-MM-DD') AS update_date
        ,C.update_by
        from p_menu A
        ,p_role B
        ,p_permission C
        where 1=1
        and A.menu_id = C.menu_id
        and B.role_id = C.role_id
        <if test="roleName != null and roleName != ''">
            AND B.role_name = #{roleName}
        </if>
    </select>

    <select id="getRoleList" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT
            ROLE_ID ,
            ROLE_NAME
        FROM P_ROLE
    </select>

    <update id="updateRole">
        UPDATE P_ROLE
        SET
        ROLE_NAME = #{roleName},
        STATUS = #{status},
        CAN_CREATE = #{canCreate},
        CAN_READ = #{canRead},
        CAN_UPDATE = #{canUpdate},
        CAN_DELETE = #{canDelete},
        MENU = #{menu}
        WHERE ROLE_ID = #{roleId}
    </update>

    <insert id="insertRole">
        INSERT INTO P_ROLE (ROLE_ID, ROLE_NAME, STATUS, CAN_CREATE, CAN_READ, CAN_UPDATE, CAN_DELETE, MENU)
        VALUES (#{roleId}, #{roleName}, #{status}, #{canCreate}, #{canRead}, #{canUpdate}, #{canDelete}, #{menu})
    </insert>

    <delete id="deleteRole">
        DELETE FROM P_ROLE WHERE ROLE_ID = #{roleId}
    </delete>

    <update id="updatePermission">
        UPDATE p_permission
        SET can_create = #{canCreate}
          , can_read = #{canRead}
          , can_update = #{canUpdate}
          , can_delete = #{canDelete}
          , create_date = CURRENT_TIMESTAMP
          , UPDATE_BY = 'ADMIN'
        WHERE permission_id = #{permissionId}
    </update>

    <delete id="deletePermission" >
        DELETE FROM p_permission
        WHERE permission_id = #{permissionId}
    </delete>

</mapper>