<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.siportal.portal.mapper.AdminMapper">
    <select id= "getMenuId" resultType="INTEGER">
        SELECT NEXTVAL('SEQ_P_MENU');
    </select>
    <insert id="createMenu">
        INSERT INTO P_MENU (MENU_ID, MENU_NAME, PARENT_MENU_ID, PATH, POSITION, CHILD_YN, STATUS, DEPTH, CREATE_DATE, CREATE_BY)
        VALUES (#{menuId}, #{menuName}, #{parentMenuId}, #{path}, #{position}, #{childYn}, #{status}, #{depth}, NOW(), #{createBy})
    </insert>
    <delete id="deleteMenu" parameterType="map">
        DELETE FROM P_MENU WHERE MENU_ID = #{menuId} or PARENT_MENU_ID = #{menuId};
    </delete>
    <update id="updateSchedule">
        UPDATE P_SCHEDULER
        SET
            CRON_TAB = #{cronTab},
            STATUS = #{status},
            UPDATE_DATE = NOW(),
            UPDATE_BY = #{userId}
        WHERE JOB_NAME = #{jobName}
            AND GROUP_NAME = #{groupName}
            AND TRIGGER_KEY = #{triggerKey}
            AND CLASS_NAME = #{className}
    </update>
    <insert id="createSchedule">
        INSERT INTO P_SCHEDULER (JOB_NAME, GROUP_NAME, TRIGGER_KEY, CLASS_NAME, CRON_TAB, STATUS, CREATE_DATE, CREATE_BY)
        VALUES (#{jobName}, #{groupName}, #{triggerKey}, #{className}, #{cronTab}, #{status}, now(), #{userId})
    </insert>
    <select id="getMenuTree" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT
            A.MENU_ID,
            A.MENU_NAME,
            A.PARENT_MENU_ID,
            coalesce(B.MENU_NAME, '-') AS PARENT_MENU_NAME,
            A.PATH,
            A.POSITION,
            A.CHILD_YN,
            A.STATUS
        FROM
            P_MENU A
        LEFT JOIN
            P_MENU B
        ON
            A.PARENT_MENU_ID = B.MENU_ID
        ORDER BY A.DEPTH, A.POSITION;
    </select>
    <delete id="deleteSchedule">
        DELETE FROM P_SCHEDULER
        WHERE JOB_NAME = #{jobName}
            AND GROUP_NAME = #{groupName}
    </delete>
    <select id="getScheduleList" parameterType="String" resultType="com.siportal.portal.dto.SchedulDTO">
        SELECT
            JOB_NAME, GROUP_NAME, TRIGGER_KEY, CLASS_NAME, CRON_TAB, TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') CREATE_DATE, STATUS
            , ROW_NUMBER() OVER() AS GRID_ROW_ID
        FROM
            P_SCHEDULER
        WHERE 1 = 1
        <if test="status != null and status != ''">
            AND STATUS = #{status}
        </if>
        <if test="jobName != null and jobName != ''">
            AND JOB_NAME = #{jobName}
        </if>
        ORDER BY JOB_NAME
    </select>
    <delete id="deleteUser" >
        DELETE FROM P_USER
        WHERE USER_ID = #{userId}
    </delete>

    <delete id="deleteUserRole" >
        DELETE FROM P_USER_ROLE
        WHERE USER_ID = #{userId}
    </delete>

    <update id="updateUser">
        UPDATE P_USER
        SET USER_NAME = #{userName}
        , EMAIL = #{email}
        , PHONE_NUMBER = #{phoneNumber}
        , STATUS = #{status}
        , UPDATE_DATE = NOW()
        , UPDATE_BY = 'ADMIN'
        WHERE USER_ID = #{userId}
    </update>
    <update id="updateUserRole">
        UPDATE P_USER_ROLE
        SET ROLE_ID = #{roleId}
        WHERE USER_ID = #{userId}
    </update>

    <update id="updateProfileImage">
        UPDATE P_USER SET PROFILE_IMAGE = #{profileImage}
        WHERE USER_ID = #{userId}
    </update>

    <select id="getUserProfileImage" resultType="map">
        SELECT COALESCE(PROFILE_IMAGE,'') AS PROFILE_IMAGE
        FROM P_USER
        WHERE USER_ID = #{userId}
    </select>

    <update id="updatePhoneNumber">
        UPDATE P_USER
        SET PHONE_NUMBER = #{phoneNumber}, UPDATE_DATE = NOW()
        WHERE USER_ID = #{userId}
    </update>

    <select id="getUserPhoneNumber" resultType="map">
        SELECT PHONE_NUMBER AS "phoneNumber"
        FROM P_USER
        WHERE USER_ID = #{userId}
    </select>

    <insert id="registerUserRole">
        INSERT INTO P_USER_ROLE (USER_ID, ROLE_ID)
        VALUES (#{userId}, #{roleId})
    </insert>

    <update id="deleteUserInfo">
        DO $$
        DECLARE
        user_id VARCHAR := #{userId};
        BEGIN
        DELETE FROM P_USER WHERE USER_ID = user_id;
        DELETE FROM P_USER_ROLE WHERE USER_ID = user_id;
        END $$;
    </update>

    <select id="getEmailHistory" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT ROW_NUMBER() OVER (ORDER BY CREATION_TIME desc) as GRID_ROW_ID
        ,SEND_USER
        ,SEND_RECIVER
        ,TITLE
        ,CONTENT
        ,READ_YN
        ,TO_CHAR(CREATION_TIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATION_TIME
        FROM P_EMAIL_HISTORY
        WHERE 1=1
        <if test="sendUser != null and sendUser != ''">
            AND SEND_USER = #{sendUser}
        </if>
        ORDER BY CREATION_TIME desc
    </select>

    <select id="getAllRoles" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT
            ROW_NUMBER() over () AS GRID_ROW_ID
            ,A.ROLE_ID
            ,A.ROLE_NAME
            ,A.STATUS
            ,TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
            ,A.CREATE_BY
            ,TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
            ,A.UPDATE_BY
        FROM P_ROLE A
        WHERE 1=1
        <if test="roleName != null and roleName != ''">
            AND A.role_name = #{roleName}
        </if>
        ORDER BY A.ROLE_ID ASC
    </select>

    <select id="getRoleList" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT
            ROLE_ID ,
            ROLE_NAME
        FROM P_ROLE
    </select>

<!--    <update id="updateRole">-->
<!--        UPDATE P_ROLE-->
<!--        SET-->
<!--        ROLE_NAME = #{roleName},-->
<!--        STATUS = #{status},-->
<!--        CAN_CREATE = #{canCreate},-->
<!--        CAN_READ = #{canRead},-->
<!--        CAN_UPDATE = #{canUpdate},-->
<!--        CAN_DELETE = #{canDelete},-->
<!--        MENU = #{menu}-->
<!--        WHERE ROLE_ID = #{roleId}-->
<!--    </update>-->

    <insert id="insertRole" parameterType="map">
        INSERT INTO p_role (ROLE_ID, ROLE_NAME, STATUS, update_date, CREATE_BY)
        VALUES (NEXTVAL('SEQ_P_ROLE'), #{roleName}, #{status}, CURRENT_TIMESTAMP, 'SYSTEM')
    </insert>

    <delete id="deleteRole">
        DELETE FROM P_ROLE WHERE ROLE_ID = #{roleId}
    </delete>

    <update id="updateRole" parameterType="map">
            UPDATE p_role
               SET ROLE_NAME = #{roleName},
                   STATUS = #{status},
                   update_date = CURRENT_TIMESTAMP,
                   CREATE_BY = 'SYSTEM',
                   UPDATE_BY = 'SYSTEM'
             WHERE ROLE_ID = #{roleId}
    </update>

    <delete id="deleteRoles" parameterType="list">
        DELETE FROM P_ROLE WHERE ROLE_ID IN
        <foreach item="roleId" collection="list" open="(" separator="," close=")">
            #{roleId}
        </foreach>
    </delete>

    <select id="getMenuIdSeq" resultType="com.siportal.portal.com.result.ComResultMap">
        SELECT NEXTVAL('SEQ_P_MENU') AS MENU_ID
    </select>

    <insert id="insertMenu" parameterType="map">
        INSERT INTO dev.p_menu
        (menu_id, menu_name, parent_menu_id, "depth", "path", "position", child_yn, status, create_date)
        VALUES
            (#{menuId}, #{menuName}, #{parentMenuId}, #{depth}, #{path}, #{position}, #{childYn}, #{status}, CURRENT_TIMESTAMP);
    </insert>

    <update id="updateMenuContent" parameterType="map">
        UPDATE p_menu SET
                          MENU_NAME = #{menuName},
                          PATH = #{path},
                          POSITION = #{position},
                          STATUS = #{status},
                          UPDATE_DATE = CURRENT_TIMESTAMP,
                          UPDATE_BY = #{userId}
        WHERE MENU_ID = #{menuId}
    </update>

    <select id="getMenuRole" resultType="com.siportal.portal.com.result.ComResultMap">
        select ROW_NUMBER() OVER () as GRID_ROW_ID
             ,B.permission_id
             ,C.role_name
             ,B.can_create
             ,B.can_read
             ,B.can_update
             ,B.can_delete
             ,TO_CHAR(B.create_date, 'YYYY-MM-DD HH24:MI:SS') AS create_date
             ,B.create_by
             ,TO_CHAR(B.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date
             ,B.update_by
        from p_menu A, p_permission B, p_role C
        where  A.menu_id = B.menu_id
          and B.role_id = C.role_id
          and B.menu_id = #{menuId}
    </select>

    <insert id="createMenuRole">
        INSERT INTO P_PERMISSION (PERMISSION_ID, ROLE_ID, MENU_ID, CREATE_DATE, CREATE_BY, CAN_CREATE, CAN_READ, CAN_UPDATE, CAN_DELETE)
        VALUES (nextval('seq_p_permission'), #{roleId}, #{menuId}, CURRENT_TIMESTAMP, 'ADMIN',
        <choose>
            <when test="canCreate != null">#{canCreate}</when>
            <otherwise>'N'</otherwise>
        </choose>,
        <choose>
            <when test="canRead != null">#{canRead}</when>
            <otherwise>'N'</otherwise>
        </choose>,
        <choose>
            <when test="canUpdate != null">#{canUpdate}</when>
            <otherwise>'N'</otherwise>
        </choose>,
        <choose>
            <when test="canDelete != null">#{canDelete}</when>
            <otherwise>'N'</otherwise>
        </choose>
        )
    </insert>


    <update id="updateMenuRole">
        UPDATE P_PERMISSION
        SET CAN_CREATE = #{canCreate}
          , CAN_READ = #{canRead}
          , CAN_UPDATE = #{canUpdate}
          , CAN_DELETE = #{canDelete}
          , UPDATE_DATE = NOW()
          , UPDATE_BY = 'ADMIN'
        WHERE PERMISSION_ID = #{permissionId}
          AND ROLE_ID = #{roleId}
          AND MENU_ID = #{menuId}
    </update>

    <delete id="deleteMenuRole">
        DELETE FROM P_PERMISSION
        WHERE PERMISSION_ID = #{permissionId}
            AND ROLE_ID = #{roleId}
            AND MENU_ID = #{menuId}
    </delete>

    <update id="updateUserPassword">
        UPDATE P_USER
        SET PASSWORD = #{password}, UPDATE_DATE = NOW()
        WHERE USER_ID = #{userId}
    </update>

</mapper>